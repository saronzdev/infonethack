---
import Layout from '../layouts/Layout.astro'
import PostCard from '../components/PostCard.astro'
import matter from 'gray-matter'
import 'dotenv/config'

const BASE_URL = import.meta.env.BACKEND

const fetchPosts = async () => {
  try {
    const response = await fetch(BASE_URL + '/api/posts')
    if (!response.ok) {
      console.error('Error fetching posts:', response.statusText)
      return []
    }
    const result = await response.json()
    return result
  } catch (error) {
    console.error('Error fetching posts:', error.message)
    return []
  }
}

const posts = await fetchPosts()
const isVoid = posts.length === 0

const newPosts = posts
  .map((post: any) => {
    const { data } = matter(post.content)
    return {
      title: data.title,
      description: data.description,
      date: data.date,
      slug: post.slug
    }
  })
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
---

<Layout>
  <section class="my-4 flex flex-col items-center gap-8 px-4">
    <button type="submit" class="px-6 py-3 rounded-md bg-muted text-background font-bold hover:cursor-pointer">
      <a href="/new">Crear nueva publicaci√≥n</a>
    </button>
    <h2 class="text-2xl m-0 text-center font-semibold text-text">
      {isVoid ? 'Upss... No hay publicaciones disponibles.' : 'Publicaciones recientes:'}
    </h2>
    <div class="w-full flex flex-col items-center gap-6">
      {
        !isVoid &&
          newPosts.map((post) => (
            <PostCard title={post.title} description={post.description} date={post.date} slug={post.slug} />
          ))
      }
    </div>
  </section>
</Layout>
